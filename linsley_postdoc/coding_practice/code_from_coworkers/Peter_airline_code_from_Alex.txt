rm(list = ls())
library(plyr)
library(edgeR)
library(compareGroups)
library(dbscan)
library(MAST)
library(ggsignif)
library(monocle3)
library(dplyr)
library(geosphere)

library(ggplot2); library(reshape2); theme_set(theme_bw(26) + theme(panel.grid.major = element_blank(), 
                                                 panel.grid.minor = element_blank()) +
                              theme(legend.key = element_blank()))
update_geom_defaults("point", aes(size = 4))

## load files
setwd("~/Dropbox/RNAseq/Trinity/CD45/P91_Karen_junbao/Monocle_clone_linking/")

tcrs = readRDS("cds_scanorama_batch4_tcrs.rds") # use cds object as source of TCRs

tcrs = tcrs[c("libid", "v_gene", "j_gene", "junction")]
colnames(tcrs) = c("libID", "V.gene", "J.gene", "junction") # 1413
#tcrs = tcrs[!duplicated(tcrs[,]),] #1406

anno.tcrs = readRDS("cds_scanorama_batch4_tcrs.rds")
colnames(anno.tcrs) = gsub("v_gene", "V.gene", colnames(anno.tcrs))
colnames(anno.tcrs) = gsub("j_gene", "J.gene", colnames(anno.tcrs))
colnames(anno.tcrs) = gsub("junction", "junction", colnames(anno.tcrs))
colnames(anno.tcrs) = gsub("libid", "libID", colnames(anno.tcrs))

cds = readRDS("cds_structure_scanorama_batch4.rds")

cds$libID = cds$libId

## read cds object

p = readRDS("cds_scanorama_batch4.rds")

anno.tcrs = subset(anno.tcrs, libID %in% cds$libID) # subset tcrs to libs in cds object

## look at TCR expansion in clusters

cut <- 2
no = ddply(anno.tcrs,.(V.gene, J.gene,junction), plyr::summarize, sum = length(junction))
no.sub = subset(no, sum>=cut)
no.not.sub = subset(no, sum<cut)

E = subset(anno.tcrs, junction %in% no.sub$junction) # 1490
NE = subset(anno.tcrs, !junction %in% E$junction) # 4232
E.cell = subset(anno, anno$libID %in% E$libID) # 844
NE.cell = subset(anno, !anno$libID %in% E$libID) # 2203

E.cell.u = E.cell[!duplicated(E.cell$libID),] # 844
NE.cell.u = NE.cell[!duplicated(NE.cell$libID),] # 2203

## calculate overlap using circos code

sub = E

##### trim TCR sequences
melt.tcrs = sub[,]
melt.tcrs = melt.tcrs[c("libID", "V.gene", "junction")]
melt.tcrs$junction = as.character(melt.tcrs$junction)

###### combine TRAV as origing and TRBV as deistination using junction as key
melt.join = merge(melt.tcrs, melt.tcrs, by = "junction", stringsAsFactors = F)
melt.join$junction = as.character(melt.join$junction)

#melt.join = subset(melt.join, !melt.join$libID.x== melt.join$libID.y)

##### limit variables

melt.join = melt.join[c(1,2,4)]
colnames(melt.join) = c("junction", "orig", "dest")

##### remove duplicated TCR records including libID
#melt.join = subset(melt.join, !orig == dest)
mju = melt.join # 3386
mju = mju[!duplicated(mju[,]),] # 3770

#### tabulate repeated pairings without libID and create df2
#table.mju= aggregate(list(numdup=rep(1,nrow(mju[2:ncol(mju)]))), mju[2:ncol(mju)], length)
table.mju = ddply(mju,.(orig, dest), plyr::summarize, numdup = length(orig))

table.mju$orig = as.character(table.mju$orig)
table.mju$dest = as.character(table.mju$dest)
table.set = subset(table.mju, table.mju$orig %in% sub$libID)

## remove duplicated combinations of orig and dest http://stackoverflow.com/questions/24194879/all-combinations-of-two-and-remove-if-they-are-same-in-r

library(data.table)
library(igraph)
g <-graph_from_data_frame(table.set[, 1:2], directed = F)
g <- simplify(g, remove.multiple = T, remove.loops = T)
zz = data.frame(get.edgelist(g))
colnames(zz) = c("orig", "dest")

temp = get.data.frame(g)
colnames(temp) = c("orig", "dest")
tempa = data.frame(orig = temp$dest, dest = temp$orig) # 730
#tempc = rbind(temp, tempa)
#tempc = tempc[!duplicated(tempc[,]),]

#temp$merge = paste(temp$orig, temp$dest)

t.sub = subset(table.set, table.set$orig %in% zz$orig & table.set$dest %in% zz$dest)
mdf6 = t.sub # 238
mdf6 = temp

mdf6 = subset(mdf6, !orig == dest) # 1824

## 

## extract UMAP coordinates from ggplot object and calculate centroids for clusters as mean of x and y coordiintes
cluster_cols = c("red", "gray")
cluster_cols2 = c("red", "blue", "gray")
cluster_cols3 = c("gray", "red")
 
gb<-ggplot_build(p)
gb.data = gb$data[[1]]
libs = cds$libID
gb.data$libID = libs

## extract UMAP coordinates for each expanded cell

mdf6$x = gb.data$x[match(mdf6$orig, gb.data$libID)]
mdf6$y = gb.data$y[match(mdf6$orig, gb.data$libID)]
mdf6$xend = gb.data$x[match(mdf6$dest, gb.data$libID)]
mdf6$yend = gb.data$y[match(mdf6$dest, gb.data$libID)]

for.lines = mdf6

#for.lines = for.lines[,c("lenOver", "x","y","xend", "yend")]
#for.lines$thick = for.lines$numdup/4
#for.lines$thick = c(0.00000125)
for.lines$thick = c(0.1)

#for.lines$thick = c(1)

### colour by cluster

dev.off()
quartz(width=10,height=8, dpi=72)  ### open plotting window

## set defaults
theme_set(theme_bw(30) + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) + theme(legend.key = element_blank()))

pal = c('#a6cee3','#1f78b4','#b2df8a','#33a02c','#fb9a99','#e31a1c','#fdbf6f','#ff7f00','#cab2d6','#6a3d9a','#ffed6f','#b15928', "gray")	
plot_cells(cds, color_cells_by="cluster", cell_size = 2, group_label_size = 0.000001, graph_label_size = 0.0001, show_trajectory_graph = F, label_branch_points = F, label_cell_groups = F)
last_plot() + scale_color_manual(values = pal, name = "cluster")# custom colors
last_plot() + geom_curve(data = for.lines, aes(x = x, y = y, xend = xend, yend = yend), size = for.lines$thick, curvature = 0.6)



